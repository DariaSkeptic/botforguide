import logging
from telegram import Update
from telegram.ext import ContextTypes

from config import CODEWORDS, DATE_RE
from utils import admin_notify, fmt_user
from arcana_calculator import calc_arcana
from gdrive_integration import get_pdf
from antispam import can_issue, mark_issue, minutes_left

def _extract_program_from_args(context: ContextTypes.DEFAULT_TYPE) -> str | None:
    if not getattr(context, "args", None): return None
    if not context.args: return None
    raw = context.args[0].strip().lower()
    return CODEWORDS.get(raw)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    program = _extract_program_from_args(context)
    if not program:
        target = update.message or update.callback_query.message
        await target.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞. –ü–µ—Ä–µ–π–¥–∏ –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ Instagram."
        )
        return
    context.user_data["program"] = program
    user = update.effective_user
    name = user.first_name or user.username or "–¥—Ä—É–≥"
    await (update.message or update.callback_query.message).reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {name}. –ö–∏–¥–∞–π –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì."
    )
    await admin_notify(context, f"üü° –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è\n–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {fmt_user(user)}")

async def on_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    await update.message.reply_text(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{text}'")
    if not DATE_RE.match(text):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä 14.08.1990).")
        await update.message.reply_text(f"DEBUG: Regex –Ω–µ –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è '{text}'")
        return
    await update.message.reply_text(f"DEBUG: Regex –ø—Ä–æ–π–¥–µ–Ω, —Ç–µ–∫—Å—Ç: '{text}'")
    program = context.user_data.get("program")
    if not program:
        await update.message.reply_text(
            "–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ Instagram –µ—â—ë —Ä–∞–∑."
        )
        await update.message.reply_text(f"DEBUG: –ù–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ user_data")
        return
    await update.message.reply_text(f"DEBUG: –ü—Ä–æ–≥—Ä–∞–º–º–∞: {program}")
    uid = update.effective_user.id
    await update.message.reply_text(f"DEBUG: –ê–Ω—Ç–∏—Å–ø–∞–º can_issue={can_issue(uid)}")
    if not can_issue(uid):
        wait = minutes_left(uid)
        await admin_notify(context, f"‚õîÔ∏è –ê–Ω—Ç–∏—Å–ø–∞–º\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {fmt_user(update.effective_user)}\n"
                                    f"–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program}\n–î–∞—Ç–∞: {text}\n–û—Å—Ç–∞–ª–æ—Å—å: ~{wait} –º–∏–Ω")
        msg = "–õ–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        if wait: msg += f" –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ {wait} –º–∏–Ω."
        await update.message.reply_text(msg)
        await update.message.reply_text(f"DEBUG: –ê–Ω—Ç–∏—Å–ø–∞–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª")
        return
    try:
        arc = calc_arcana(program, text)
        await update.message.reply_text(f"DEBUG: –ê—Ä–∫–∞–Ω –≤—ã—á–∏—Å–ª–µ–Ω: {arc}")
        pdf = await get_pdf(program, arc)
        await update.message.reply_text(f"DEBUG: PDF –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è {program}, –∞—Ä–∫–∞–Ω {arc}")
        pretty = {"kapusta": "–ö–∞–ø—É—Å—Ç–∞", "avatar": "–ê–≤–∞—Ç–∞—Ä", "amourchik": "–ê–º—É—Ä—á–∏–∫"}[program]
        await update.message.reply_document(pdf, caption=f"{pretty}: –∞—Ä–∫–∞–Ω {arc:02d}. –î–µ—Ä–∂–∏ —Å–≤–æ–π –≥–∞–π–¥.")
        mark_issue(uid)
        await admin_notify(context, f"‚úÖ –í—ã–¥–∞–Ω –≥–∞–π–¥\n–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program} | –ê—Ä–∫–∞–Ω: {arc:02d}\n"
                                    f"–î–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞: {text}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {fmt_user(update.effective_user)}")
    except FileNotFoundError:
        await update.message.reply_text(
            "–ì–∞–π–¥ –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä–∫–∞–Ω–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        )
        await admin_notify(context, f"‚ùóÔ∏è –ì–∞–π–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –¥–∏—Å–∫–µ\n–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program}\n–î–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞: {text}\n"
                                    f"–û–∂–∏–¥–∞–ª—Å—è —Ñ–∞–π–ª: {arc:02d}.pdf")
        await update.message.reply_text(f"DEBUG: FileNotFoundError –¥–ª—è {arc:02d}.pdf")
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ PDF: %s", e)
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await admin_notify(context, f"üî• –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏\n–ü—Ä–æ–≥—Ä–∞–º–º–∞: {program}\n–î–∞—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞: {text}\n–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(f"DEBUG: –û—à–∏–±–∫–∞: {str(e)}")