import logging
from telegram import Update
from telegram.ext import ContextTypes

from config import CODEWORDS, DATE_RE, ADMIN_CHAT_ID
from arcana_calculator import calculate_arcana
from antispam import can_issue, minutes_left, mark_issue
from gdrive_integration import get_guide
from utils import admin_notify, fmt_user

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Ä—É—Å—Å–∫–∏–µ, –∏ –ª–∞—Ç–∏–Ω–∏—Ü—É
ALIAS = {
    "–∫–∞–ø—É—Å—Ç–∞": "kapusta", "kapusta": "kapusta",
    "–∞–≤–∞—Ç–∞—Ä": "avatar", "avatar": "avatar",
    "–∞–º—É—Ä—á–∏–∫": "amourchik", "–∞–ºurchik": "amourchik", "amourchik": "amourchik",
}

def _program_from_args(args) -> str:
    if not args:
        return CODEWORDS.get("kapusta", "kapusta")
    key = (args[0] or "").strip().lower()
    return ALIAS.get(key, CODEWORDS.get(key, CODEWORDS.get("kapusta", "kapusta")))

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    program = _program_from_args(context.args)
    context.user_data["program"] = program

    await update.message.reply_text(
        "–ö–∏–¥–∞–π –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì ‚Äî –ø—Ä–∏—à–ª—é –æ–¥–∏–Ω —Ñ–∞–π–ª: "
        "¬´–í–∞—à –∞—Ä–∫–∞–Ω N ‚Äî –≤–æ—Ç –≤–∞—à –≥–∞–π–¥¬ª. "
        f"–ö–æ–¥: {program}"
    )

    if ADMIN_CHAT_ID:
        await admin_notify(context, f"‚ñ∂Ô∏è /start {program} –æ—Ç {fmt_user(user)}")

async def on_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (update.message.text or "").strip()

    # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if not DATE_RE.match(text):
        await update.message.reply_text("–ù—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì. –ü—Ä–∏–º–µ—Ä: 01.06.1926")
        return

    # –ê–Ω—Ç–∏—Å–ø–∞–º
    if not can_issue(user.id):
        await update.message.reply_text(f"–ì–¥–µ-—Ç–æ —Ç–æ—Ä–æ–ø–∏–º—Å—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. –ú–∏–Ω—É—Ç –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {minutes_left(user.id)}.")
        return

    program = context.user_data.get("program") or CODEWORDS.get("kapusta", "kapusta")

    # –°—á—ë—Ç –∞—Ä–∫–∞–Ω–∞ –ø–æ –º–∞—Ç—Ä–∏—Ü–µ —Å —É—á—ë—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    try:
        arcana = calculate_arcana(text, program)
    except Exception:
        await update.message.reply_text("–î–∞—Ç–∞ –∫—Ä–∏–≤–∞—è. –î–∞–≤–∞–π –ø–æ-—á–µ—Å—Ç–Ω–æ–º—É: –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

    # –î–æ—Å—Ç–∞—ë–º PDF –∏ —à–ª—ë–º –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    try:
        guide_path = get_guide(program, arcana)
        if not guide_path:
            await update.message.reply_text("–ì–∞–π–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            if ADMIN_CHAT_ID:
                await admin_notify(context, f"‚ùóÔ∏è –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è {program}/{arcana}.pdf —É {fmt_user(user)}")
            return

        caption = f"{program.capitalize()}: –∞—Ä–∫–∞–Ω {arcana}. –î–µ—Ä–∂–∏ —Å–≤–æ–π –≥–∞–π–¥."
        with open(guide_path, "rb") as f:
            await update.message.reply_document(document=f, caption=caption)

        # –æ—Ç–º–µ—á–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –≤—ã–¥–∞—á—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        mark_issue(user.id)

        if ADMIN_CHAT_ID:
            await admin_notify(context, f"‚úÖ –í—ã–¥–∞–Ω {program}/{arcana}.pdf –¥–ª—è {fmt_user(user)}")

    except Exception as e:
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ñ–∞–π–ª.")
        if ADMIN_CHAT_ID:
            await admin_notify(context, f"üî• –û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ {program}/{arcana}.pdf –¥–ª—è {fmt_user(user)}: {e}")
