import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)

GUIDES_FOLDER = "guides"
ASK_DATE = 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
def load_env():
    env_path = '.env'
    if not os.path.exists(env_path):
        raise FileNotFoundError(".env file not found")
    with open(env_path, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                key_value = line.split('=', 1)
                if len(key_value) == 2:
                    key, value = key_value
                    os.environ[key.strip()] = value.strip()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_env()
TOKEN = os.getenv("BOT_TOKEN")

def get_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞—Ä–∫–∞–Ω", callback_data="calculate")],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", callback_data="restart"),
         InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_menu()
    user = update.effective_user
    name = user.first_name if user.first_name else user.username if user.username else "–¥—Ä—É–≥"

    welcome_text = (
        f"üîÆ –ü—Ä–∏–≤–µ—Ç, {name}!\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ —Ç–µ–±—è –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤ –æ–±—â–µ—Å—Ç–≤–µ ‚Äî —á–µ—Ä–µ–∑ –∞—Ä–∫–∞–Ω —Å—É–¥—å–±—ã.\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á—ë—Ç:"
    )

    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=keyboard)
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(welcome_text, reply_markup=keyboard)

    return ConversationHandler.END

async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data

    if action == "calculate":
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")
        return ASK_DATE

    elif action == "restart":
        return await start(update, context)

    elif action == "help":
        await query.message.reply_text(
            "üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n"
            "1. –ù–∞–∂–º–∏ \"–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∞—Ä–∫–∞–Ω\"\n"
            "2. –í–≤–µ–¥–∏ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14.08.1990)\n"
            "3. –ü–æ–ª—É—á–∏ —Å–≤–æ–π –∞—Ä–∫–∞–Ω –∏ –≥–∞–π–¥ –≤ PDF\n\n"
            "–ù–∞–∂–º–∏ \"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END

async def calculate_arcan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        day = int(text.split(".")[0])
        if not (1 <= day <= 31):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å")

        if day <= 22:
            arcan_number = day
        else:
            digit_sum = sum(int(d) for d in str(day))
            while digit_sum > 22:
                digit_sum = sum(int(d) for d in str(digit_sum))
            arcan_number = digit_sum

        guide_path = os.path.join(GUIDES_FOLDER, f"{arcan_number}.pdf")
        if os.path.exists(guide_path):
            await update.message.reply_text(f"–í–∞—à –∞—Ä–∫–∞–Ω: {arcan_number}. –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –≥–∞–π–¥...")
            with open(guide_path, "rb") as file:
                await update.message.reply_document(file)
        else:
            await update.message.reply_text("–ì–∞–π–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É.")
    except Exception:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∫–∞–∫: 12.05.1995")

    await update.message.reply_text("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                                    reply_markup=get_main_menu())
    return ConversationHandler.END

if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(menu_handler, pattern="^(calculate|restart|help)$")],
        states={ASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_arcan)]},
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.run_polling()
