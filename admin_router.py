from telegram import Update
from telegram.ext import ContextTypes

from config import TOKEN, GOOGLE_CREDENTIALS_JSON_B64, PROGRAM_FOLDERS, ADMIN_CHAT_ID, ADMIN_USER_ID
from utils import admin_keyboard, admin_notify, is_admin, _to_thread
from gdrive_integration import list_filenames
import base64
import json
import logging

async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update): return
    await update.message.reply_text("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_keyboard())

async def adm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.callback_query.answer()
        return
    data = update.callback_query.data
    await update.callback_query.answer()
    if data == "adm:diag":
        await admin_diag(update, context)
    elif data == "adm:missing":
        await admin_missing(update, context)
    elif data == "adm:myid":
        await update.callback_query.message.reply_text(
            f"–¢–≤–æ–π Telegram ID: <code>{update.effective_user.id}</code>", parse_mode="HTML"
        )
    elif data == "adm:test":
        await admin_notify(context, "–¢–µ—Å—Ç: —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω‚Äë—á–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ")
        await update.callback_query.message.reply_text("–û—Ç–ø—Ä–∞–≤–∏–ª–∞ —Ç–µ—Å—Ç –≤ –∞–¥–º–∏–Ω‚Äë—á–∞—Ç.")
    elif data == "adm:cfg":
        await admin_cfg(update, context)

async def admin_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    problems = []
    ok = []
    if TOKEN: ok.append("BOT_TOKEN: OK")
    else: problems.append("BOT_TOKEN: –ù–ï –∑–∞–¥–∞–Ω")
    if GOOGLE_CREDENTIALS_JSON_B64:
        try:
            json.loads(base64.b64decode(GOOGLE_CREDENTIALS_JSON_B64))
            ok.append("GOOGLE_CREDENTIALS_JSON_B64: OK")
        except Exception:
            problems.append("GOOGLE_CREDENTIALS_JSON_B64: –ù–ï –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç—Å—è")
    else:
        problems.append("GOOGLE_CREDENTIALS_JSON_B64: –ù–ï –∑–∞–¥–∞–Ω")
    for k, v in PROGRAM_FOLDERS.items():
        if v: ok.append(f"GDRIVE_FOLDER_{k.upper()}: OK")
        else: problems.append(f"GDRIVE_FOLDER_{k.upper()}: –ù–ï –∑–∞–¥–∞–Ω")
    if ADMIN_CHAT_ID: ok.append(f"ADMIN_CHAT_ID: OK ({ADMIN_CHAT_ID})")
    else: problems.append("ADMIN_CHAT_ID: –ù–ï –∑–∞–¥–∞–Ω")
    if ADMIN_USER_ID: ok.append(f"ADMIN_USER_ID: OK ({ADMIN_USER_ID})")
    else: ok.append("ADMIN_USER_ID: –Ω–µ –∑–∞–¥–∞–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
    text = "üß© –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n\n"
    if ok: text += "‚úÖ OK:\n- " + "\n- ".join(ok) + "\n\n"
    if problems: text += "‚ùå –ü—Ä–æ–±–ª–µ–º—ã:\n- " + "\n- ".join(problems)
    else: text += "–ü—Ä–æ–±–ª–µ–º –Ω–µ –≤–∏–∂—É."
    await update.callback_query.message.reply_text(text)

async def admin_missing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    report_lines = ["üìÅ –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ PDF:"]
    try:
        for program, folder in PROGRAM_FOLDERS.items():
            if not folder:
                report_lines.append(f"- {program}: –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                continue
            try:
                names = await _to_thread(list_filenames, folder)
                have = {n.lower() for n in names}
                required = [f"{i:02}.pdf" for i in range(1, 23)]
                missing = [f for f in required if f.lower() not in have]
                if missing:
                    report_lines.append(f"- {program}: –Ω–µ—Ç {', '.join(missing)}")
                else:
                    report_lines.append(f"- {program}: –≤—Å–µ 22 —Ñ–∞–π–ª–∞ –Ω–∞ –º–µ—Å—Ç–µ ‚úÖ")
            except Exception as e:
                report_lines.append(f"- {program}: –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ ({e})")
    except Exception as e:
        report_lines.append(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    await update.callback_query.message.reply_text("\n".join(report_lines))

async def admin_cfg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pretty_map = {
        "kapusta": PROGRAM_FOLDERS["kapusta"],
        "avatar": PROGRAM_FOLDERS["avatar"],
        "amourchik": PROGRAM_FOLDERS["amourchik"],
    }
    text = (
        "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤):\n"
        f"- ADMIN_CHAT_ID: {ADMIN_CHAT_ID or '‚Äî'}\n"
        f"- ADMIN_USER_ID: {ADMIN_USER_ID or '‚Äî'}\n"
        f"- Folders:\n"
        f"  ‚Ä¢ kapusta:   {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' if pretty_map['kapusta'] else '‚Äî'}\n"
        f"  ‚Ä¢ avatar:    {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' if pretty_map['avatar'] else '‚Äî'}\n"
        f"  ‚Ä¢ amourchik: {'–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞' if pretty_map['amourchik'] else '‚Äî'}\n"
        "- –î–∏–∞–ø–∞–∑–æ–Ω –∞—Ä–∫–∞–Ω–æ–≤: 01..22\n"
        "- –ê–Ω—Ç–∏—Å–ø–∞–º: 2 –≤—ã–¥–∞—á–∏ / 30 –º–∏–Ω"
    )
    await update.callback_query.message.reply_text(text)

async def cmd_where(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update): return
    c = update.effective_chat
    await update.message.reply_text(
        f"chat.id = <code>{c.id}</code>\n"
        f"type = <b>{c.type}</b>\n"
        f"title = {c.title or '‚Äî'}",
        parse_mode="HTML"
    )

async def cmd_panic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update): return
    args = (update.message.text or "").split()
    if len(args) < 2:
        await update.message.reply_text("–£–∫–∞–∂–∏ chat_id: /panic -1001234567890")
        return
    try:
        chat_id = int(args[1])
        await context.bot.leave_chat(chat_id)
        await update.message.reply_text(f"–í—ã—à–ª–∞ –∏–∑ —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —Å–º–æ–≥–ª–∞: {e}")