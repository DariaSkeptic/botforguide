import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import ContextTypes, CallbackContext, CommandHandler
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ò—Å—Ö–æ–¥–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
def get_admin_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ PDF", callback_data="missing_pdfs")],
        [InlineKeyboardButton("–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PDF", callback_data="existing_pdfs")],
        [InlineKeyboardButton("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", callback_data="env_vars")],
        [InlineKeyboardButton("ID –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="ids_settings")],
    ]
    return InlineKeyboardMarkup(keyboard)

async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /admin –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username} ({user.id})")
    admin_user_id = os.getenv("ADMIN_USER_ID")
    if not admin_user_id:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
        await update.message.reply_text("–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        return
    try:
        if str(user.id) == admin_user_id:
            reply_markup = get_admin_keyboard()
            await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)
        else:
            await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_admin: {str(e)}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")

async def admin_panel_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    user = query.from_user
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç {user.username} ({user.id}) —Å –¥–∞–Ω–Ω—ã–º–∏: {query.data}")
    admin_user_id = os.getenv("ADMIN_USER_ID")
    if not admin_user_id:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏!")
        await query.edit_message_text("–û—à–∏–±–∫–∞: –∞–¥–º–∏–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")
        return
    try:
        if str(user.id) == admin_user_id:
            reply_markup = get_admin_keyboard()
            if query.data == "missing_pdfs":
                logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö PDF")
                from gdrive_integration import list_missing_guides
                missing = list_missing_guides()
                if missing:
                    await query.edit_message_text(f"–ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ PDF:\n{'\n'.join(missing)}", reply_markup=reply_markup)
                else:
                    await query.edit_message_text("–í—Å–µ PDF –Ω–∞ –º–µ—Å—Ç–µ!", reply_markup=reply_markup)
            elif query.data == "existing_pdfs":
                logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö PDF")
                from gdrive_integration import list_existing_guides
                existing = list_existing_guides()
                if existing:
                    await query.edit_message_text(f"–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PDF:\n{'\n'.join(existing)}", reply_markup=reply_markup)
                else:
                    await query.edit_message_text("–ù–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö PDF.", reply_markup=reply_markup)
            elif query.data == "env_vars":
                logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                env_vars = {
                    "BOT_TOKEN": "–ó–∞–¥–∞–Ω–∞" if os.getenv("BOT_TOKEN") else "–ù–µ –∑–∞–¥–∞–Ω–∞",
                    "ADMIN_USER_ID": os.getenv("ADMIN_USER_ID", "–ù–µ –∑–∞–¥–∞–Ω–∞"),
                    "ADMIN_CHAT_ID": os.getenv("ADMIN_CHAT_ID", "–ù–µ –∑–∞–¥–∞–Ω–∞"),
                    "GDRIVE_FOLDER_KAPUSTA": os.getenv("GDRIVE_FOLDER_KAPUSTA", "–ù–µ –∑–∞–¥–∞–Ω–∞"),
                    "GDRIVE_FOLDER_AVATAR": os.getenv("GDRIVE_FOLDER_AVATAR", "–ù–µ –∑–∞–¥–∞–Ω–∞"),
                    "GDRIVE_FOLDER_AMOURCHIK": os.getenv("GDRIVE_FOLDER_AMOURCHIK", "–ù–µ –∑–∞–¥–∞–Ω–∞"),
                    "GOOGLE_CREDENTIALS_JSON_B64": "–ó–∞–¥–∞–Ω–∞" if os.getenv("GOOGLE_CREDENTIALS_JSON_B64") else "–ù–µ –∑–∞–¥–∞–Ω–∞",
                }
                await query.edit_message_text(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n{'\n'.join(f'{k}: {v}' for k, v in env_vars.items())}", reply_markup=reply_markup)
            elif query.data == "ids_settings":
                logger.info("–ó–∞–ø—É—Å–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ID –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                user_id = os.getenv("ADMIN_USER_ID", "–ù–µ –∑–∞–¥–∞–Ω")
                chat_id = os.getenv("ADMIN_CHAT_ID", "–ù–µ –∑–∞–¥–∞–Ω")
                await query.edit_message_text(f"ID –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n–¢–≤–æ–π ID: {user.id}\nADMIN_USER_ID: {user_id}\nADMIN_CHAT_ID: {chat_id}", reply_markup=reply_markup)
        else:
            await query.edit_message_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel_callback –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {query.data}: {str(e)}")
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {query.data}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.", reply_markup=get_admin_keyboard())

# –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def cmd_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    admin_user_id = os.getenv("ADMIN_USER_ID")
    if str(user.id) == admin_user_id:
        logger.info(f"–°–±—Ä–æ—Å –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username} ({user.id})")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–±—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—á–∏—Å—Ç–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º-–∫—ç—à–∞)
        await update.message.reply_text("–ë–æ—Ç —Å–±—Ä–æ—à–µ–Ω. –ê–Ω—Ç–∏—Å–ø–∞–º-–∫—ç—à –æ—á–∏—â–µ–Ω.", reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

async def cmd_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    admin_user_id = os.getenv("ADMIN_USER_ID")
    if str(user.id) == admin_user_id:
        logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.username} ({user.id})")
        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        if admin_chat_id:
            await context.bot.send_message(chat_id=admin_chat_id, text="‚ö†Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º!")
        await update.message.reply_text("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–µ—Ä–µ–¥–µ–ø–ª–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é.", reply_markup=get_admin_keyboard())
    else:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def set_admin_menu(application):
    admin_user_id = os.getenv("ADMIN_USER_ID")
    if admin_user_id:
        bot = application.bot
        commands = [
            ("missing_pdfs", "üåø –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ PDF", "–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ PDF"),
            ("existing_pdfs", "üåø –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PDF", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PDF"),
            ("env_vars", "üåø –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
            ("ids_settings", "üåø ID –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "–ü–æ–∫–∞–∑–∞—Ç—å ID –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
            ("reset", "üåø –°–±—Ä–æ—Å –±–æ—Ç–∞", "–û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"),
            ("restart", "üåø –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫", "–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        ]
        await bot.set_my_commands(
            commands=[(cmd, desc, "admin") for cmd, desc, _ in commands],
            scope={"type": "users", "user_id": int(admin_user_id)}
        )
        logger.info(f"–ú–µ–Ω—é –∞–¥–º–∏–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {admin_user_id}")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∞–¥–º–∏–Ω–∞: ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ botforguide.py –¥–ª—è –≤—ã–∑–æ–≤–∞ set_admin_menu
# (–î–æ–±–∞–≤–∏–º —ç—Ç–æ –≤ —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π botforguide.py –Ω–∏–∂–µ)