import os
import re
import logging
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)
from start_router import cmd_start
from admin_router import cmd_admin, admin_panel_callback
from where import cmd_where
from panic import cmd_panic
from antispam import can_issue, mark_issue, minutes_left
from arcana_calc import calc_arcana
from gdrive_service import get_pdf_from_drive

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0") or 0)

# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ–±–∞–≥–∞ –∞–¥–º–∏–Ω—É
async def dbg(context: ContextTypes.DEFAULT_TYPE, text: str):
    logger.debug(text)
    if ADMIN_CHAT_ID:
        try:
            await context.bot.send_message(ADMIN_CHAT_ID, f"üõ† {text}")
        except Exception:
            pass

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞—Ç—ã
async def on_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not re.match(r"^\s*\d{2}\.\d{2}\.\d{4}\s*$", text):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä 14.08.1990).")
        return

    program = context.user_data.get("program")
    if not program:
        await update.message.reply_text("–°–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ Instagram –µ—â—ë —Ä–∞–∑.")
        return

    uid = update.effective_user.id
    if not can_issue(uid):
        wait = minutes_left(uid)
        msg = "–õ–∏–º–∏—Ç –≤—ã–¥–∞—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        if wait:
            msg += f" –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ —á–µ—Ä–µ–∑ {wait} –º–∏–Ω."
        await update.message.reply_text(msg)
        return

    try:
        arc = calc_arcana(program, text)
        pretty = {"kapusta": "–ö–∞–ø—É—Å—Ç–∞", "avatar": "–ê–≤–∞—Ç–∞—Ä", "amourchik": "–ê–º—É—Ä—á–∏–∫"}[program]
        pdf = await get_pdf_from_drive(program, arc)
        await update.message.reply_document(pdf, caption=f"{pretty}: –∞—Ä–∫–∞–Ω {arc:02d}. –î–µ—Ä–∂–∏ —Å–≤–æ–π –≥–∞–π–¥.")
        mark_issue(uid)
        await dbg(context, f"–í—ã–¥–∞–Ω –≥–∞–π–¥ {program} –∞—Ä–∫–∞–Ω {arc:02d} –¥–ª—è {uid}")
    except FileNotFoundError:
        await update.message.reply_text("–ì–∞–π–¥ –¥–ª—è —ç—Ç–æ–≥–æ –∞—Ä–∫–∞–Ω–∞ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        await dbg(context, f"–ù–µ—Ç PDF –¥–ª—è {program} –∞—Ä–∫–∞–Ω {arc:02d}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ PDF")
        await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –≤—ã–¥–∞—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        await dbg(context, f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ {program}: {e}")

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (botforguide.py)")

    token = os.getenv("BOT_TOKEN")
    if not token:
        raise SystemExit("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    app = Application.builder().token(token).build()

    # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(MessageHandler(filters.Regex(r"^\s*\d{2}\.\d{2}\.\d{4}\s*$") & filters.TEXT, on_date))
    app.add_handler(CommandHandler("admin", cmd_admin))
    app.add_handler(CallbackQueryHandler(admin_panel_callback))
    app.add_handler(CommandHandler("where", cmd_where))
    app.add_handler(CommandHandler("panic", cmd_panic))

    logger.info("–ó–∞–ø—É—Å–∫ polling‚Ä¶")
    app.run_polling(allowed_updates=["message", "callback_query"])
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
